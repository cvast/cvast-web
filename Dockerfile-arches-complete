# our base image, for now, Ubuntu
FROM ubuntu:14.04
USER root
# Currently not necessary: Replace default command interpreter from sh to bash (needed for 'source' command)
# RUN rm /bin/sh && ln -s /bin/bash /bin/sh


# Setting locale variables for database
RUN locale-gen en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV LC_LANG en_US.UTF-8
ENV LC_LANGUAGE en_US.UTF-8


# Install dependencies
RUN apt-get update -y 
RUN apt-get install -y wget
RUN apt-get install -y build-essential
RUN apt-get install -y libxml2-dev
RUN apt-get install -y libjson0-dev
RUN apt-get install -y libproj-dev
RUN apt-get install -y xsltproc docbook-xsl
RUN apt-get install -y docbook-mathml
RUN apt-get install -y libgdal1-dev
RUN apt-get install -y openjdk-7-jdk
RUN apt-get install -y python-setuptools
RUN apt-get install -y python-dev
RUN apt-get install -y libffi-dev
RUN apt-get install -y libpq-dev
RUN	easy_install pip


# Needed for postgres-9.4
RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main" >> /etc/apt/sources.list.d/pgdg.list
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
  sudo apt-key add -
RUN apt-get update -y

# Install postgres
RUN apt-get install -y postgresql-9.4
RUN apt-get install -y postgresql-server-dev-9.4
RUN apt-get install -y postgresql-contrib-9.4

USER postgres
RUN /etc/init.d/postgresql start &&\
	psql -d postgres -c "ALTER USER postgres with encrypted password 'postgis';" &&\
	psql -d postgres -c "ALTER DATABASE postgres set timezone to 'US/Eastern';"

USER root	
RUN echo "*:*:*:postgres:postgis" >> ~/.pgpass
RUN chmod 600 ~/.pgpass
RUN chmod 666 /etc/postgresql/9.4/main/postgresql.conf
RUN chmod 666 /etc/postgresql/9.4/main/pg_hba.conf

RUN echo "standard_conforming_strings = off" >> /etc/postgresql/9.4/main/postgresql.conf
RUN echo "listen_addresses = '*'" >> /etc/postgresql/9.4/main/postgresql.conf
RUN echo "#TYPE   DATABASE  USER  CIDR-ADDRESS  METHOD" > /etc/postgresql/9.4/main/pg_hba.conf
RUN echo "local   all       all                 trust" >> /etc/postgresql/9.4/main/pg_hba.conf
RUN echo "host    all       all   127.0.0.1/32  trust" >> /etc/postgresql/9.4/main/pg_hba.conf
RUN echo "host    all       all   ::1/128       trust" >> /etc/postgresql/9.4/main/pg_hba.conf
RUN echo "host    all       all   0.0.0.0/0     md5" >> /etc/postgresql/9.4/main/pg_hba.conf
RUN echo "host all all 127.0.0.1 255.255.255.0 trust" >> /etc/postgresql/9.4/main/pg_hba.conf
RUN service postgresql restart


# Install Geos	
WORKDIR /tmp	
RUN	wget http://download.osgeo.org/geos/geos-3.4.2.tar.bz2
RUN	tar xvfj geos-3.4.2.tar.bz2
WORKDIR	/tmp/geos-3.4.2
RUN	./configure
RUN	make
RUN	make install
	
	
# Install Postgis
WORKDIR /tmp
RUN wget http://download.osgeo.org/postgis/source/postgis-2.1.3.tar.gz
RUN tar xfvz postgis-2.1.3.tar.gz
WORKDIR /tmp/postgis-2.1.3
RUN ./configure
RUN make
RUN make install
RUN ldconfig
RUN make comments-install
RUN ln -sf /usr/share/postgresql-common/pg_wrapper /usr/local/bin/shp2pgsql
RUN ln -sf /usr/share/postgresql-common/pg_wrapper /usr/local/bin/pgsql2shp
RUN ln -sf /usr/share/postgresql-common/pg_wrapper /usr/local/bin/raster2pgsql


# root project folder
RUN mkdir /arches-cvast

# Install the Arches application	
COPY arches /arches-cvast/arches
WORKDIR	/arches-cvast/arches
RUN	pip install --no-index -e .
RUN python setup.py build
RUN python setup.py install


# Install Arches Hip
COPY arches_hip /arches-cvast/arches_hip
WORKDIR /arches-cvast/arches_hip
RUN pip install --no-index -e .
# RUN python setup.py build
# RUN python setup.py install


# Setup databases
USER postgres	
RUN /etc/init.d/postgresql start &&\
	sleep 5 &&\
	psql -d postgres -c "CREATE EXTENSION postgis;" &&\
	createdb -E UTF8 -T template0 --locale=en_US.utf8 template_postgis_20 &&\
	psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis_20'" &&\
	psql -d template_postgis_20 -c "CREATE EXTENSION postgis;" &&\
	psql -d template_postgis_20 -c "GRANT ALL ON geometry_columns TO PUBLIC;" &&\
	psql -d template_postgis_20 -c "GRANT ALL ON geography_columns TO PUBLIC;" &&\
	psql -d template_postgis_20 -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;" &&\
	createdb training -T template_postgis_20 &&\
	# createdb -E UTF8 -T template_postgis_20 --locale=en_US.utf8 arches
USER root
	

# Setup Arches Hip app
# WORKDIR /arches-cvast	
# RUN arches-app create arches_hip_cvast --app arches_hip

# Install Elasticsearch
COPY arches_hip_cvast /arches-cvast/arches_hip_cvast
WORKDIR /arches-cvast/arches_hip_cvast
RUN python manage.py packages -o setup_elasticsearch

# Run database scripts & arches hip resources
# USER postgres	
RUN /etc/init.d/postgresql start &&\
	python manage.py packages -o start_elasticsearch &&\
	# Wait for elasticsearch to start
	sleep 10 &&\ 
	python manage.py packages -o install &&\
	python manage.py packages -o load_concept_scheme -s arches_hip_cvast/source_data/concepts/authority_files &&\
	/etc/init.d/postgresql stop


# Cleanup
# USER root
RUN rm -rf /tmp/*

EXPOSE 8000
EXPOSE 5432

COPY ./install/init_env.sh /arches/init_env.sh
CMD sh -c '/arches/init_env.sh'
# CMD sh -c 'su postgres --command "/usr/lib/postgresql/9.4/bin/postgres -D /var/lib/postgresql/9.4/main -c config_file=/etc/postgresql/9.4/main/postgresql.conf" &&\
	# /arches/arches/arches_hip/arches_hip/elasticsearch/elasticsearch-1.4.1/bin/elasticsearch &&\
	# sleep 10 && python /arches/arches/arches_hip/arches_hip_cvast/manage.py runserver 0.0.0.0:8000'
